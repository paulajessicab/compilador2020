Traducir de PCF0 a PCF1

Ejercicio 1) 
a) let x:Nat = 2 in succ x


(fun (x : Nat) -> succ x) 2

**Validación:**

:print let x:Nat = 2 in succ x

STerm:
SLet (1,1) "x" [] SNatTy (SConst (1,15) (CNat 2)) (SApp (1,18) (SUnaryOp (1,18) Succ) (SV (1,24) "x"))

NTerm:
App (1,1) (Lam (1,1) "x" NatTy (UnaryOp (1,18) Succ (V (1,24) "x"))) (Const (1,15) (CNat 2))

Term:
App (1,1) (Lam (1,1) "x" NatTy (UnaryOp (1,18) Succ (V (1,24) (Bound 0)))) (Const (1,15) (CNat 2))

b) fun (x:Nat) -> x

fun (x : Nat) -> x

**Validación**

:print fun (x:Nat) -> x
STerm:
SLam (1,1) [("x",SNatTy)] (SV (1,17) "x")

NTerm:
Lam (1,1) "x" NatTy (V (1,17) "x")

Term:
Lam (1,1) "x" NatTy (V (1,17) (Bound 0))

c) let id (x:Nat):Nat = x in id 10

(fun (id : Nat -> Nat) -> id 10) (fun (x : Nat) -> x)

**Validación**

:print let id (x:Nat):Nat = x in id 10
STerm:
SLet (1,1) "id" [("x",SNatTy)] SNatTy (SV (1,24) "x") (SApp (1,27) (SV (1,30) "id") (SConst (1,32) (CNat 10)))

NTerm:
App (1,1) (Lam (1,1) "id" (FunTy NatTy NatTy) (App (1,27) (V (1,30) "id") (Const (1,32) (CNat 10)))) (Lam (1,1) "x" NatTy (V (1,24) "x"))

Term:
App (1,1) (Lam (1,1) "id" (FunTy NatTy NatTy) (App (1,27) (V (1,30) (Bound 0)) (Const (1,32) (CNat 10)))) (Lam (1,1) "x" NatTy (V (1,24) (Bound 0)))

d) let app5 (f:Nat-> Nat) : Nat = f 5 in app5 succ

(fun app5 : ((Nat -> Nat) -> Nat) -> fun (x : Nat) -> app5 (succ x))(fun f : (Nat -> Nat) -> f 5)

**Validación**

:print let app5 (f:Nat-> Nat) : Nat = f 5 in app5 succ
STerm:
SLet (1,1) "app5" [("f",SFunTy SNatTy SNatTy)] SNatTy (SApp (1,32) (SV (1,34) "f") (SConst (1,36) (CNat 5))) (SApp (1,39) (SV (1,44) "app5") (SUnaryOp (1,44) Succ))

NTerm:
App (1,1) (Lam (1,1) "app5" (FunTy (FunTy NatTy NatTy) NatTy) (App (1,39) (V (1,44) "app5") (Lam (1,44) "x" NatTy (UnaryOp (1,44) Succ (V (1,44) "x"))))) (Lam (1,1) "f" (FunTy NatTy NatTy) (App (1,32) (V (1,34) "f") (Const (1,36) (CNat 5))))

Term:
App (1,1) (Lam (1,1) "app5" (FunTy (FunTy NatTy NatTy) NatTy) (App (1,39) (V (1,44) (Bound 0)) (Lam (1,44) "x" NatTy (UnaryOp (1,44) Succ (V (1,44) (Bound 0)))))) (Lam (1,1) "f" (FunTy NatTy NatTy) (App (1,32) (V (1,34) (Bound 0)) (Const (1,36) (CNat 5))))

e) fun (x:Nat) (y:Nat) -> ifz x then y else 1

fun (x : Nat) -> fun (y : Nat) -> ifz x then y else 1

**Validación**

:print fun (x:Nat) (y:Nat) -> ifz x then y else 1
STerm:
SLam (1,1) [("x",SNatTy),("y",SNatTy)] (SIfZ (1,24) (SV (1,30) "x") (SV (1,37) "y") (SConst (1,43) (CNat 1)))

NTerm:
Lam (1,1) "x" NatTy (Lam (1,1) "y" NatTy (IfZ (1,24) (V (1,30) "x") (V (1,37) "y") (Const (1,43) (CNat 1))))

Term:
Lam (1,1) "x" NatTy (Lam (1,1) "y" NatTy (IfZ (1,24) (V (1,30) (Bound 1)) (V (1,37) (Bound 0)) (Const (1,43) (CNat 1))))

- Ejercicio 2 (declaraciones):

a) let rec doble (x:Nat):Nat = ifz x then 0 else succ(succ(doble(pred x)))

let doble : Nat -> Nat = fix (doble : Nat -> Nat) (x : Nat) -> ifz x then 0 else succ (succ (doble (pred x)))

**Validación**

PCF> :browse
doble
ack

PCF> doble
fix (doble : Nat -> Nat) (x : Nat) ->
  ifz x then 0 else succ (succ (doble (pred x))) : Nat -> Nat

b) let rec ack (m:Nat) (n:Nat) : Nat = ifz m then succ m else (ifz n then ack (pred m) 1 else ack (pred m) (ack m (pred n)))

let ack : Nat -> Nat -> Nat = fix (ack : Nat -> Nat -> Nat) (m : Nat) -> fun (n : Nat) ->  ifz m then (succ m) else (ifz n then ack (pred m) 1 else ack (pred m) (ack m (pred n)))

**Validación**

:browse
doble
ack

PCF> ack
fix (ack : Nat -> Nat -> Nat) (m : Nat) ->
  fun (n : Nat) ->
    ifz
      m
    then
      succ m
    else
      ifz n then ack (pred m) 1 else ack (pred m) (ack m (pred n)) : Nat -> Nat -> Nat