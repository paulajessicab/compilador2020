### Probamos la traduccion a LLVM con todas las operaciones aritmeticas b√°sicas.

let prd (x : Nat) : Nat = x - 1
let sc (x : Nat) : Nat = x + 1

let rec suma (x y : Nat) : Nat =
    ifz y 
        then x
        else suma (sc x) (prd y)

let rec fib (x:Nat) : Nat = 
    ifz x 
        then 1 
        else (ifz prd x then 1 else suma (fib (prd x)) (fib (prd (prd x))))  

let rec resta (x y : Nat) : Nat =
    ifz y 
        then x
        else resta (prd x) (prd y)

let rec mult (x y : Nat) : Nat =
    ifz y 
        then 0 
        else suma x (mult x (prd y))

let rec exp (x y : Nat) : Nat =
    ifz y 
        then 1 
        else mult x (exp x (prd y))

let rec fact (x:Nat) : Nat =
    ifz x 
        then 1
        else mult x (fact (prd x))

let res : Nat = fib (resta (mult (fact 4) (exp 2 3)) 187)
