let prd (x : Nat) : Nat = x - 1
let sc (x : Nat) : Nat = x + 1


let rec fib (x : Nat) : Nat =
  ifz x
    then 1
    else (ifz prd x
      then 1 
      else (fib (x-1)) + (fib (x-2)))

let rec ack (m : Nat) (n : Nat) : Nat =
  ifz m
    then sc n
    else (ifz n
      then ack (prd m) 1
      else ack (prd m) (ack m (prd n)))

# Dead code elimination
let dead (x : Nat) : Nat = x + x

# Const folding
let l : Nat = ifz 0 then 1 else 2
let r : Nat = ifz 1 then 1 else 2

let n1 : Nat = 2 + (3 + 1) - (ack 1 (1 + 1))

# Inlining
let big (x : Nat) : Nat = sc (sc (sc (sc (sc x))))
let rec small (x : Nat) : Nat = x + 5

let n2 : Nat = (small (small (small (small (small 2))))) + (big 2)

let DEBUG : Nat = 1
let f2 (x : Nat) : Nat = x + 5
let f1 (x : Nat) : Nat = f2 x

let x : Nat = ifz DEBUG then f2 5 else f1 (2 + 3)

let n3 : Nat = ack 3 2 + n2 + x
