# Archivo con funciones varias (algunas de las primeras pr√°cticas) para ir probando

# definicion de tipo
type N = Nat

let prd (x : Nat) : Nat = x - 1

let rec mult(x y : N):Nat = ifz y then 0 else x + (mult x (prd y))

let rec exp(x y : N):Nat = ifz y then 1 else mult x (exp x (prd y))

let res:Nat = exp 2 3
